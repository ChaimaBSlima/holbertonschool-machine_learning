#!/usr/bin/env python3
""" Task 1: 1. Same Convolution """
import numpy as np


def convolve_grayscale_same(images, kernel):
    """
    Perform a same convolution on grayscale images.

    This convolution preserves the height and width of the input images by
    applying zero padding based on the kernel size.

    Parameters:
    images (numpy.ndarray):
    A numpy array of shape (m, h, w) containing m grayscale images,
    each of height h and width w.
    kernel (numpy.ndarray):
    A numpy array of shape (kh, kw) representing the convolution kernel,
    where kh is the height and kw is the width of the kernel.

    Returns:
    numpy.ndarray:
    A numpy array of shape (m, h, w) containing the result of the convolution,
    where h and w are the original height and width of the input images.
    The output is generated by applying zero padding to the input images.
    """
    m = images.shape[0]
    h = images.shape[1]
    w = images.shape[2]
    kh = kernel.shape[0]
    kw = kernel.shape[1]
    H = max(int((kh - 1) / 2), int(kh / 2))
    W = max(int((kw - 1) / 2), int(kw / 2))
    images_padded = np.pad(images,
                           pad_width=((0, 0), (H, H), (W, W)),
                           mode='constant', constant_values=0)

    image_filter = np.zeros((m, h, w))
    for i in range(h):
        for j in range(w):
            image_filter[:, j, i] = (kernel
                                     * images_padded[:, j: j + kh,
                                                     i: i + kw])\
                                                         .sum(axis=(1, 2))
    return image_filter
